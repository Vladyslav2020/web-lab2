{"version":3,"sources":["SendEmailForm.js","useHttp.js","Loader.js","App.js","index.js"],"names":["form","needToAddEventListeners","needToCheckValidation","SendEmailForm","showLoader","hideLoader","useState","isValid","setIsValid","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","status","console","log","Error","ok","message","cleanErrors","useHttp","firstName","lastName","subject","state","setState","useEffect","changeState","key","newValue","prevState","document","querySelector","addEventListener","event","checkValidity","sendEmail","preventDefault","classList","add","alert","className","noValidate","htmlFor","type","id","value","onChange","target","required","onClick","disabled","Loader","role","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"wGAKIA,E,0FAFAC,GAA0B,EAC1BC,GAAwB,EAwJbC,EArJO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACjC,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,ECPmB,WACnB,MAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACMC,EAAUC,sBAAW,uCACvB,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GAAnD,SAEQT,GAAW,GACPQ,IACAA,EAAOE,KAAKC,UAAUH,GACtBC,EAAQ,gBAAkB,oBALtC,SAO+BG,MAAMP,EAAK,CAAEE,SAAQC,OAAMC,YAP1D,cAOcI,EAPd,iBAQ2BA,EAASC,OARpC,WAQcC,EARd,OASgC,MAApBF,EAASG,OATrB,uBAUYC,QAAQC,IAAI,oBACN,IAAIC,MAAM,oBAX5B,eAaaN,EAASO,IACVH,QAAQC,IAAI,yBAA2BH,EAAKM,SAEhDrB,GAAW,GAhBnB,kBAiBee,GAjBf,wCAmBQf,GAAW,GACXE,EAAS,EAAD,IApBhB,+DADuB,sDAyBvB,IAGJ,MAAO,CAAEH,UAASI,UAASF,QAAOqB,YADdlB,uBAAY,kBAAMF,EAAS,QAAO,KDvBZqB,GAAlCxB,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,QAASmB,EAA1B,EAA0BA,YAC1B,EAA0B1B,mBAAS,CAC/B4B,UAAW,GACXC,SAAU,GACVC,QAAS,GACTL,QAAS,KAJb,mBAAOM,EAAP,KAAcC,EAAd,KAMAC,qBAAU,WACF9B,EAASL,IACRC,MACN,CAACI,IAEJ,IAAM+B,EAAc,SAACC,EAAKC,GACtBJ,GAAS,SAAAK,GAAS,kCAAUA,GAAV,kBAAsBF,EAAMC,QAElDH,qBAAU,WACFtC,IACAA,GAA0B,GAC1BD,EAAO4C,SAASC,cAAc,sBACzBC,iBAAiB,UAAU,SAAUC,OAAW,MAE1D,IAEHR,qBAAU,WACDrC,IAGDF,EAAKgD,gBACLxC,GAAW,GAEXA,GAAW,OAInB,IAAMyC,EAAS,uCAAG,WAAMF,GAAN,eAAA/B,EAAA,yDACd+B,EAAMG,iBACNhD,GAAwB,EACnBF,EAAKgD,gBAHI,uBAIVhD,EAAKmD,UAAUC,IAAI,iBAJT,mDAQavC,EACnB,4DACA,OACA,CACIqB,UAAWG,EAAMH,UACjBC,SAAUE,EAAMF,SAChBC,QAASC,EAAMD,QACfL,QAASM,EAAMN,UAfb,OAQJR,EARI,OAkBV8B,MAAM9B,EAASQ,SAlBL,kDAoBVC,IApBU,yBAsBV9B,GAAwB,EAtBd,6EAAH,sDAyBf,OACI,qBAAKoD,UAAU,iBAAf,SACI,uBAAMA,UAAU,2BAA2BC,YAAU,EAArD,UACI,sBAAKD,UAAU,KAAf,UACI,uBAAOE,QAAQ,YAAYF,UAAU,aAArC,wBAGA,uBACIG,KAAK,OACLH,UAAU,eACVI,GAAG,YACHC,MAAOtB,EAAMH,UACb0B,SAAU,SAAAb,GAAK,OACXP,EAAY,YAAaO,EAAMc,OAAOF,QAE1CG,UAAQ,IAEZ,qBAAKR,UAAU,iBAAf,wBACA,qBAAKA,UAAU,mBAAf,yBAEJ,sBAAKA,UAAU,KAAf,UACI,uBAAOE,QAAQ,WAAWF,UAAU,aAApC,uBAGA,uBACIG,KAAK,OACLH,UAAU,eACVI,GAAG,WACHC,MAAOtB,EAAMF,SACbyB,SAAU,SAAAb,GAAK,OACXP,EAAY,WAAYO,EAAMc,OAAOF,QAEzCG,UAAQ,IAEZ,qBAAKR,UAAU,iBAAf,wBACA,qBAAKA,UAAU,mBAAf,yBAEJ,sBAAKA,UAAU,KAAf,UACI,uBAAOE,QAAQ,UAAUF,UAAU,aAAnC,qBAGA,uBACIG,KAAK,OACLH,UAAU,eACVI,GAAG,UACHC,MAAOtB,EAAMD,QACbwB,SAAU,SAAAb,GAAK,OACXP,EAAY,UAAWO,EAAMc,OAAOF,QAExCG,UAAQ,IAEZ,qBAAKR,UAAU,iBAAf,wBACA,qBAAKA,UAAU,mBAAf,yBAEJ,sBAAKA,UAAU,KAAf,UACI,uBAAOE,QAAQ,UAAUF,UAAU,aAAnC,2BAGA,uBACIG,KAAK,OACLH,UAAU,eACVI,GAAG,UACHC,MAAOtB,EAAMN,QACb6B,SAAU,SAAAb,GAAK,OACXP,EAAY,UAAWO,EAAMc,OAAOF,QAExCG,UAAQ,IAEZ,qBAAKR,UAAU,iBAAf,wBACA,qBAAKA,UAAU,mBAAf,yBAEJ,qBAAKA,UAAU,SAAf,SACI,wBACIA,UAAU,kBACVG,KAAK,SACLM,QAASd,EACTe,SACIvD,IAAaF,GAAWL,EALhC,iCEhIL+D,EAVA,WACX,OACI,qBAAKX,UAAU,SAAf,SACI,qBAAKA,UAAU,8BAA8BY,KAAK,SAAlD,SACI,sBAAMZ,UAAU,kBAAhB,6BCkBDa,EAnBH,WACR,MAA8B7D,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAOA,OACI,gCACI,qBAAK4C,UAAU,iBAAf,SACI,oBAAIA,UAAU,cAAd,oCAEJ,cAAC,EAAD,CAAelD,WAXJ,WACfM,GAAW,IAUgCL,WAR5B,WACfK,GAAW,MAQND,GAAW,cAAC,EAAD,QCdxB2D,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJ1B,SAAS2B,eAAe,U","file":"static/js/main.22c1f1b6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHttp } from './useHttp';\n\nlet needToAddEventListeners = true;\nlet needToCheckValidation = false;\nlet form;\n\nconst SendEmailForm = ({ showLoader, hideLoader }) => {\n    const [isValid, setIsValid] = useState(true);\n    const { loading, request, cleanErrors } = useHttp();\n    const [state, setState] = useState({\n        firstName: '',\n        lastName: '',\n        subject: '',\n        message: '',\n    });\n    useEffect(() => {\n        if (loading) showLoader();\n        else hideLoader();\n    }, [loading]);\n\n    const changeState = (key, newValue) => {\n        setState(prevState => ({ ...prevState, [key]: newValue }));\n    };\n    useEffect(() => {\n        if (needToAddEventListeners) {\n            needToAddEventListeners = false;\n            form = document.querySelector('.needs-validation');\n            form.addEventListener('change', function (event) {}, false);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!needToCheckValidation) {\n            return;\n        }\n        if (form.checkValidity()) {\n            setIsValid(true);\n        } else {\n            setIsValid(false);\n        }\n    });\n\n    const sendEmail = async event => {\n        event.preventDefault();\n        needToCheckValidation = true;\n        if (!form.checkValidity()) {\n            form.classList.add('was-validated');\n            return;\n        }\n        try {\n            const response = await request(\n                'https://afternoon-shore-72034.herokuapp.com/api/send-mail',\n                'POST',\n                {\n                    firstName: state.firstName,\n                    lastName: state.lastName,\n                    subject: state.subject,\n                    message: state.message,\n                },\n            );\n            alert(response.message);\n        } catch (err) {\n            cleanErrors();\n        } finally {\n            needToCheckValidation = false;\n        }\n    };\n    return (\n        <div className=\"container mt-2\">\n            <form className=\"row g-3 needs-validation\" noValidate>\n                <div className=\"md\">\n                    <label htmlFor=\"firstName\" className=\"form-label\">\n                        First name\n                    </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"firstName\"\n                        value={state.firstName}\n                        onChange={event =>\n                            changeState('firstName', event.target.value)\n                        }\n                        required\n                    />\n                    <div className=\"valid-feedback\">Validated!</div>\n                    <div className=\"invalid-feedback\">Invalid!</div>\n                </div>\n                <div className=\"md\">\n                    <label htmlFor=\"lastName\" className=\"form-label\">\n                        Last name\n                    </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"lastName\"\n                        value={state.lastName}\n                        onChange={event =>\n                            changeState('lastName', event.target.value)\n                        }\n                        required\n                    />\n                    <div className=\"valid-feedback\">Validated!</div>\n                    <div className=\"invalid-feedback\">Invalid!</div>\n                </div>\n                <div className=\"md\">\n                    <label htmlFor=\"subject\" className=\"form-label\">\n                        Subject\n                    </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"subject\"\n                        value={state.subject}\n                        onChange={event =>\n                            changeState('subject', event.target.value)\n                        }\n                        required\n                    />\n                    <div className=\"valid-feedback\">Validated!</div>\n                    <div className=\"invalid-feedback\">Invalid!</div>\n                </div>\n                <div className=\"md\">\n                    <label htmlFor=\"message\" className=\"form-label\">\n                        Email message\n                    </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"message\"\n                        value={state.message}\n                        onChange={event =>\n                            changeState('message', event.target.value)\n                        }\n                        required\n                    />\n                    <div className=\"valid-feedback\">Validated!</div>\n                    <div className=\"invalid-feedback\">Invalid!</div>\n                </div>\n                <div className=\"col-12\">\n                    <button\n                        className=\"btn btn-primary\"\n                        type=\"button\"\n                        onClick={sendEmail}\n                        disabled={\n                            loading || (!isValid && needToCheckValidation)\n                        }\n                    >\n                        Submit form\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default SendEmailForm;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const request = useCallback(\n        async (url, method = 'GET', body = null, headers = {}) => {\n            try {\n                setLoading(true);\n                if (body) {\n                    body = JSON.stringify(body);\n                    headers['Content-Type'] = 'application/json';\n                }\n                const response = await fetch(url, { method, body, headers });\n                const data = await response.json();\n                if (response.status === 401) {\n                    console.log('No authorization');\n                    throw new Error('No authorization');\n                }\n                if (!response.ok) {\n                    console.log('Something went wrong: ' + data.message);\n                }\n                setLoading(false);\n                return data;\n            } catch (err) {\n                setLoading(false);\n                setError(err);\n                throw err;\n            }\n        },\n        [],\n    );\n    const cleanErrors = useCallback(() => setError(null), []);\n    return { loading, request, error, cleanErrors };\n};\n","import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <div className=\"spinner-border text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, { useState } from 'react';\nimport SendEmailForm from './SendEmailForm';\nimport './index.css';\nimport Loader from './Loader';\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const showLoader = () => {\n        setLoading(true);\n    };\n    const hideLoader = () => {\n        setLoading(false);\n    };\n    return (\n        <div>\n            <div className=\"container mt-2\">\n                <h2 className=\"text-center\">Fill send email form</h2>\n            </div>\n            <SendEmailForm showLoader={showLoader} hideLoader={hideLoader} />\n            {loading && <Loader />}\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}